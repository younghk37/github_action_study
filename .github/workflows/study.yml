name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        run: ./mvnw clean package -Dtestskip

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build Docker
        run : docker build --platform linux/amd64 -t ${{secrets.DOCKERHUB_USERNAME }}/server .
      - name : Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/server:latest

  deploy:
    # 위의 빌드 작업이 정상적으로 되어야만 실행한다는 뜻
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: 
          # CURRENT_UPSTREAM이라는 변수에 응답을 저장
          CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.NGINX_IP }}/env")
          echo $CURRENT_UPSTREAM
          # -ne 는 not equal을 의미한다. -o는 or를 의미한다.
          # 블루도 그린도 아니면 블루로
          if [ $CURRENT_UPSTREAM -ne blue -o $CURRENT_UPSTREAM -ne green ]; then
            #CURRENT_UPSTREAM=blue
          # if를 닫는다
          fi
          if [ $CURRENT_UPSTEAM -eq blue ]; then
            # run이 끝나면 셸이 종료된다. 따라서 밑에서도 계속 쓰려면 >> $GITHUB_ENV 해서 저장해둬야 함. 밑에서 CURRENT_IP는 계속 쓸 수 있게 되었다.
            echo "CURRENT_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "STOPPED_ID=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          fi
          elif [ $CURRENT_UPSTEAM -eq green ]; then
            echo "CURRENT_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "STOPPED_ID=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
          else
            # 에러 발생 시 멈춘다
            echo "erorr"
            exit 1
          fi
      - name: Docker compose
        # github action에서 ssh접속 및 셸 스크립트 사용 가능
        uses: appleboy@ssh-action@master
        with:
          # 아래 세 가지 변수를 채워 넣어야 한다
          username: ubuntu
          # $GITHUB_ENV에 저장해 둔 변수 꺼내려면 env.해서 꺼내면 된다
          host: ${{ env.STOPPED_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script:
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/server:latest
            docker-compose up -d
      - name: Check deploy server URL PORT 8080
        # 헬스 체크 해주는 액션임
        # 10초마다 총 30초 동안 요청해서 응답 없으면 배포 중단
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8080/env
          max-attempts: 3
          retry-delay: 10s
      - name: Check deploy server URL PORT 8081
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8081/env
          max-attempts: 3
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy@ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.NGINX_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: 
            # TARGET_UPSTREAM의 값으로 설정한 결과를 /etc/nginx/conf.d/server-env.inc에 저장한다
            docker exec -i nginxserver bash -c 'echo "set \$server_env ${{ env.TARGET_UPSTREAM }}"; >> /etc/nginx/conf.d/server-env.inc && service nginx reload'
      - name: Stop current server
        uses: appleboy@ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.CURRENT_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script:
            docker stop prod1
            docker stop prod2
            docker rm prod1
            docker rm prod2
